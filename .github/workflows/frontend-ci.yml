name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: ['frontend/**']
  pull_request:
    branches: [ main ]
    paths: ['frontend/**']

jobs:
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    strategy:
      matrix:
        node-version: [16.x, 18.x]

    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v3

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 💅 Check Prettier formatting
        run: npm run format:check

      - name: 🧪 Run unit tests with coverage
        run: npm run test:coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: codecov-frontend

      - name: 🏗️ Build application
        run: npm run build

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-files-${{ matrix.node-version }}
          path: frontend/build/

  e2e-tests:
    runs-on: ubuntu-latest
    needs: frontend-tests
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v3

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 🐳 Start backend services
        run: |
          cd ../
          docker-compose up -d backend

      - name: ⏳ Wait for backend
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

      - name: 🌐 Start frontend
        run: |
          npm install -g serve
          serve -s build -l 3000 &
          sleep 5

      - name: 🧪 Run Cypress E2E tests
        run: npm run test:e2e
        env:
          CYPRESS_baseUrl: http://localhost:3000

      - name: 📹 Upload Cypress videos
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-videos
          path: frontend/cypress/videos/

      - name: 📸 Upload Cypress screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots/

  security-audit:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v3

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 🔐 Run security audit
        run: npm audit --audit-level=moderate

  performance-audit:
    runs-on: ubuntu-latest
    needs: frontend-tests
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v3

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 📊 Analyze bundle size
        run: npm run build:analyze -- --no-open

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [frontend-tests, e2e-tests, security-audit]
    if: github.ref == 'refs/heads/develop'
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v3

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build for staging
        run: npm run build
        env:
          REACT_APP_API_BASE_URL: ${{ secrets.STAGING_API_URL }}
          REACT_APP_ENVIRONMENT: staging

      - name: 🚀 Deploy to Staging
        run: echo "Deploy to staging environment"
        # Add your staging deployment commands here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [frontend-tests, e2e-tests, security-audit, performance-audit]
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v3

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build for production
        run: npm run build
        env:
          REACT_APP_API_BASE_URL: ${{ secrets.PRODUCTION_API_URL }}
          REACT_APP_ENVIRONMENT: production

      - name: 🚀 Deploy to Production
        run: echo "Deploy to production environment"
        # Add your production deployment commands here
